@mixin yellow-box($important:"") {
    background: $yellow-box-bg linear-gradient(to top, $yellow-box-bottom, $yellow-box-top) unquote($important);
    box-shadow: 0 2px 3px 0 rgba(73, 73, 73, 0.5) unquote($important);
}

@mixin yellow-box-white-bg($important:"") {
    background: white linear-gradient(to top, $yellow-box-bottom, $yellow-box-bg) unquote($important);
    box-shadow: 0 2px 3px 0 rgba(73, 73, 73, 0.5) unquote($important);
}

@mixin yellow-box-hover($important:"") {
    background: lighten($yellow-box-bg, 10%) linear-gradient(to top, lighten($yellow-box-bottom, 10%), lighten($yellow-box-top, 10%)) unquote($important);
}

@mixin white-box($important:"") {
    background: $white-box-bg linear-gradient(283deg, $white-box-bottom, $white-box-top) unquote($important);
    box-shadow: 0 2px 3px 0 rgba(73, 73, 73, 0.5) unquote($important);
}

@mixin gray-box($important:"") {
    background-image: linear-gradient(151deg, rgba(70, 66, 71, 0.9), rgba(37, 34, 38, 0.9)) unquote($important);
}


// not working =(
//
// @mixin transition($values...) { 
//     $transitions: ();
//     @each $declaration in $values {
//         $prop: nth($declaration, 1);
//         $prop-opts: ();
//         $length: length($declaration);
//         @for $i from 2 through $length {
//             $prop-opts: append($prop-opts, nth($declaration, $i));   
//         }
//         $trans: ($prop, $prop-opts);
//         $transitions: append($transitions, $trans, comma);
//     }
      
//     -webkit-transition: trans-prefix($transitions, webkit);
//     -moz-transition: trans-prefix($transitions, moz);
//     -o-transition: trans-prefix($transitions, o);
//     transition: $values;
// }

// @function prefix($property, $prefixes: (webkit moz o ms)) {
//     $vendor-prefixed-properties: transform background-clip background-size;
//     $result: ();
//     @each $prefix in $prefixes {
//        @if index($vendor-prefixed-properties, $property) {
//          $property: -#{$prefix}-#{$property}
//        }
//        $result: append($result, $property);
//     }
//     @return $result;
// }
// @function trans-prefix($transition, $prefix: moz) {
//     $prefixed: ();
//     @each $trans in $transition {
//         $prop-name: nth($trans, 1);
//         $vendor-prop-name: prefix($prop-name, $prefix);
//         $prop-vals: nth($trans, 2);
//         $prefixed: append($prefixed, ($vendor-prop-name $prop-vals), comma);
//     }
    
//     @return $prefixed;
// }
